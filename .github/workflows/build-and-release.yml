name: Build and Release

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

jobs:
  publish-pypi:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Extract version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $VERSION"
        else
          echo "Not a tag, using version from pyproject.toml"
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Update version in files
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        echo "Updating version to: $VERSION"
        
        # Update pyproject.toml
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        
        # Update setup.py
        sed -i "s/version=\".*\"/version=\"$VERSION\"/" setup.py
        
        # Update __init__.py files
        find src -name "__init__.py" -exec sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" {} \;
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  build-executables:
    runs-on: windows-latest
    needs: publish-pypi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Extract version from tag
      id: get_version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        else
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -e .
        
    - name: Build SSH Tunnel Manager executable
      run: |
        pyinstaller --onedir --windowed --name="SSH-Tunnel-Manager" --add-data="src/ssh_tunnel_manager/gui/assets;assets" --hidden-import=tkinter --hidden-import=subprocess --hidden-import=threading --hidden-import=json --hidden-import=logging --clean ssh_tunnel_manager_app.py
        
    - name: Build SSH Tools Installer executable  
      run: |
        pyinstaller --onedir --windowed --name="SSH-Tools-Installer" --hidden-import=tkinter --hidden-import=subprocess --hidden-import=threading --hidden-import=json --hidden-import=logging --clean third_party_installer_app.py
        
    - name: Create ZIP archives
      shell: bash
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        cd dist
        
        # Create ZIP for SSH Tunnel Manager
        powershell Compress-Archive -Path "SSH-Tunnel-Manager" -DestinationPath "SSH-Tunnel-Manager-v$VERSION-Windows.zip"
        
        # Create ZIP for SSH Tools Installer
        powershell Compress-Archive -Path "SSH-Tools-Installer" -DestinationPath "SSH-Tools-Installer-v$VERSION-Windows.zip"
        
    - name: Upload executables to release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          dist/SSH-Tunnel-Manager-v${{ steps.get_version.outputs.VERSION }}-Windows.zip
          dist/SSH-Tools-Installer-v${{ steps.get_version.outputs.VERSION }}-Windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
